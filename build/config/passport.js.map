{"version":3,"sources":["../../src/config/passport.js"],"names":["opts","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","secretOrKey","keys","secret","passportJwt","passport","use","JwtStrategy","jwt_payload","done","console","log"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;AAEA;AACA,IAAMA,IAAI,GAAG,EAAb;AACAA,IAAI,CAACC,cAAL,GAAsBC,wBAAWC,2BAAX,EAAtB;AACAH,IAAI,CAACI,WAAL,GAAmBC,iBAAKC,MAAxB;;AAEO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,QAAQ,EAAI;AACrCA,EAAAA,QAAQ,CAACC,GAAT,CAAa,IAAIC,wBAAJ,CAAgBV,IAAhB,EAAsB,UAACW,WAAD,EAAcC,IAAd,EAAuB;AACxDC,IAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACD,GAFY,CAAb;AAGD,CAJM","sourcesContent":["import { JwtStrategy } from 'passport-jwt';\r\nimport { ExtractJwt } from 'passport-jwt';\r\nimport mongoose from 'mongoose';\r\nimport keys from './keys'\r\nimport User from '../database/models/User';\r\n\r\n// create empty options\r\nconst opts = {};\r\nopts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\r\nopts.secretOrKey = keys.secret;\r\n\r\nexport const passportJwt = passport => {\r\n  passport.use(new JwtStrategy(opts, (jwt_payload, done) => {\r\n    console.log(jwt_payload);\r\n  }));\r\n}"],"file":"passport.js"}