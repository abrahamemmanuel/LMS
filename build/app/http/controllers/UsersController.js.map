{"version":3,"sources":["../../../../src/app/http/controllers/UsersController.js"],"names":["UsersController","req","res","User","findOne","email","body","then","user","status","json","avatar","gravatar","url","s","r","d","newUser","name","password","salt","bcrypt","genSaltSync","hash","hashSync","save","err","console","log","message","isMatch","compareSync","toString"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;;;;;;;;;IAEMA,e;;;;;;;;;;AACJ;;;;;iCAKaC,G,EAAKC,G,EAAK;AACrB;AACAC,uBAAKC,OAAL,CAAa;AACXC,QAAAA,KAAK,EAAEJ,GAAG,CAACK,IAAJ,CAASD;AADL,OAAb,EAEGE,IAFH,CAEQ,UAAAC,IAAI,EAAI;AACd;AACA,YAAIA,IAAJ,EAAU;AACR;AACA;AACA,iBAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BL,YAAAA,KAAK,EAAE;AADmB,WAArB,CAAP;AAGD,SAND,MAMO;AACL;AACA;AACA,cAAMM,MAAM,GAAGC,qBAASC,GAAT,CAAaZ,GAAG,CAACK,IAAJ,CAASD,KAAtB,EAA6B;AAC1CS,YAAAA,CAAC,EAAE,KADuC;AAChC;AACVC,YAAAA,CAAC,EAAE,IAFuC;AAEjC;AACTC,YAAAA,CAAC,EAAE,IAHuC,CAGlC;;AAHkC,WAA7B,CAAf,CAHK,CASL;;;AACA,cAAMC,OAAO,GAAG,IAAId,gBAAJ,CAAS;AACvBe,YAAAA,IAAI,EAAEjB,GAAG,CAACK,IAAJ,CAASY,IADQ;AAEvBb,YAAAA,KAAK,EAAEJ,GAAG,CAACK,IAAJ,CAASD,KAFO;AAGvBM,YAAAA,MAAM,EAANA,MAHuB;AAIvBQ,YAAAA,QAAQ,EAAElB,GAAG,CAACK,IAAJ,CAASa;AAJI,WAAT,CAAhB,CAVK,CAiBL;;AACA,cAAMC,IAAI,GAAGC,qBAAOC,WAAP,CAAmB,EAAnB,CAAb;;AACA,cAAMC,IAAI,GAAGF,qBAAOG,QAAP,CAAgBP,OAAO,CAACE,QAAxB,EAAkCC,IAAlC,CAAb,CAnBK,CAoBL;;;AACAH,UAAAA,OAAO,CAACE,QAAR,GAAmBI,IAAnB,CArBK,CAuBL;;AACAN,UAAAA,OAAO,CACJQ,IADH,GAEGlB,IAFH,CAEQ,UAAAC,IAAI,EAAI;AACb,mBAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,IAArB,CAAP;AACA,WAJH,WAKS,UAAAkB,GAAG;AAAA,mBAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,WALZ;AAMD;AACF,OAzCD;AA0CD;AAED;;;;;;;;8BAKUzB,G,EAAKC,G,EAAK;AAClB,UAAMG,KAAK,GAAGJ,GAAG,CAACK,IAAJ,CAASD,KAAvB;AACA,UAAMc,QAAQ,GAAGlB,GAAG,CAACK,IAAJ,CAASa,QAA1B,CAFkB,CAGlB;;AACAhB,uBAAKC,OAAL,CAAa;AACXC,QAAAA,KAAK,EAALA;AADW,OAAb,EAEGE,IAFH,CAEQ,UAAAC,IAAI,EAAI;AACd,YAAI,CAACA,IAAL,EAAW;AACT;AACA;AACA,iBAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BmB,YAAAA,OAAO,EAAE;AADiB,WAArB,CAAP;AAGD;;AACD,YAAMC,OAAO,GAAGT,qBAAOU,WAAP,CAAmBZ,QAAQ,CAACa,QAAT,EAAnB,EAAwCxB,IAAI,CAACW,QAA7C,CAAhB;;AACA,YAAIW,OAAJ,EAAa;AACX;AACA;AACA,iBAAO5B,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BmB,YAAAA,OAAO,EAAE;AADiB,WAArB,CAAP;AAGD,SAND,MAMO;AACL;AACA,iBAAO3B,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BmB,YAAAA,OAAO,EAAE;AADiB,WAArB,CAAP;AAGD;AACF,OAvBD;AAwBD;;;;;;eAGY7B,e","sourcesContent":["/* eslint-disable no-shadow */\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable no-return-assign */\r\nimport gravatar from 'gravatar';\r\nimport bcrypt from 'bcryptjs';\r\nimport User from '../../../database/models/User';\r\n\r\nclass UsersController {\r\n  /**\r\n   * @params  req, res\r\n   * @desc    RegisterUser creates and save a new user record into users collection\r\n   * @return 200 status code if and only if a new user is created and saved to the users collection\r\n   */\r\n  RegisterUser(req, res) {\r\n    // Search users collection by email\r\n    User.findOne({\r\n      email: req.body.email\r\n    }).then(user => {\r\n      // Check if a user already exist with the email in the users collection\r\n      if (user) {\r\n        // if true then\r\n        // return 400 status code and display 'Email already exist' to the user\r\n        return res.status(400).json({\r\n          email: 'Email already exist'\r\n        });\r\n      } else {\r\n        // Otherwise\r\n        // Get avatar from gravatar\r\n        const avatar = gravatar.url(req.body.email, {\r\n          s: '200', // Size\r\n          r: 'pg', // Rating\r\n          d: 'mm' // Default\r\n        });\r\n\r\n        // Create a new user\r\n        const newUser = new User({\r\n          name: req.body.name,\r\n          email: req.body.email,\r\n          avatar,\r\n          password: req.body.password\r\n        });\r\n\r\n        // hash password\r\n        const salt = bcrypt.genSaltSync(10);\r\n        const hash = bcrypt.hashSync(newUser.password, salt);\r\n        // set hash password to the newUser object\r\n        newUser.password = hash;\r\n\r\n        // Save User\r\n        newUser\r\n          .save()\r\n          .then(user => {\r\n           return res.status(201).json(user);\r\n          })\r\n          .catch(err => console.log(err));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @params  req, res\r\n   * @desc    LoginUser: find and check if user record exists in the users collection\r\n   * @return 200 status code if and only if the user's records exists in the users collection\r\n   */\r\n  LoginUser(req, res) {\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n    // Find user by email\r\n    User.findOne({\r\n      email\r\n    }).then(user => {\r\n      if (!user) {\r\n        // if user's does not exists then\r\n        // return a 404 status code to the user\r\n        return res.status(401).json({\r\n          message: 'User not found'\r\n        });\r\n      }\r\n      const isMatch = bcrypt.compareSync(password.toString(), user.password);\r\n      if (isMatch) {\r\n        // if true then\r\n        // return 200 status code\r\n        return res.status(200).json({\r\n          message: 'Success'\r\n        });\r\n      } else {\r\n        // else return 404 password incorrect\r\n        return res.status(401).json({\r\n          message: 'Password Incorrect'\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default UsersController;\r\n"],"file":"UsersController.js"}