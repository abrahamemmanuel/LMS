{"version":3,"sources":["../../../../src/app/http/controllers/UsersController.js"],"names":["UsersController","req","res","User","findOne","email","body","then","user","status","json","avatar","gravatar","url","s","r","d","newUser","name","password","save","err","console","log"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;;;;;;;;;IAEMA,e;;;;;;;;;;AACJ;;;;;iCAKaC,G,EAAKC,G,EAAK;AACrB;AACAC,uBAAKC,OAAL,CAAa;AAAEC,QAAAA,KAAK,EAAEJ,GAAG,CAACK,IAAJ,CAASD;AAAlB,OAAb,EAAwCE,IAAxC,CAA6C,UAAAC,IAAI,EAAI;AACnD;AACA,YAAIA,IAAJ,EAAU;AACR;AACA;AACA,iBAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,YAAAA,KAAK,EAAE;AAAT,WAArB,CAAP;AACD,SAJD,MAIO;AACL;AACA;AACA,cAAMM,MAAM,GAAGC,qBAASC,GAAT,CAAaZ,GAAG,CAACK,IAAJ,CAASD,KAAtB,EAA6B;AAC1CS,YAAAA,CAAC,EAAE,KADuC;AAChC;AACVC,YAAAA,CAAC,EAAE,IAFuC;AAEjC;AACTC,YAAAA,CAAC,EAAE,IAHuC,CAGlC;;AAHkC,WAA7B,CAAf,CAHK,CASL;;;AACA,cAAMC,OAAO,GAAG,IAAId,gBAAJ,CAAS;AACvBe,YAAAA,IAAI,EAAEjB,GAAG,CAACK,IAAJ,CAASY,IADQ;AAEvBb,YAAAA,KAAK,EAAEJ,GAAG,CAACK,IAAJ,CAASD,KAFO;AAGvBM,YAAAA,MAAM,EAANA,MAHuB;AAIvBQ,YAAAA,QAAQ,EAAE,yBAAQlB,GAAG,CAACK,IAAJ,CAASa,QAAjB;AAJa,WAAT,CAAhB,CAVK,CAiBL;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAF,UAAAA,OAAO,CACJG,IADH,GAEGb,IAFH,CAEQ,UAAAC,IAAI,EAAI;AACZN,YAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,IAArB;AACD,WAJH,WAKS,UAAAa,GAAG;AAAA,mBAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,WALZ;AAMD;AACF,OA7CD;AA8CD;;;;;;eAGYrB,e","sourcesContent":["/* eslint-disable no-shadow */\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable no-return-assign */\r\nimport gravatar from 'gravatar';\r\nimport bcryptjs from 'bcryptjs';\r\nimport User from '../../../database/models/User';\r\nimport encrypt from '../../../utils/helpers';\r\n\r\nclass UsersController {\r\n  /**\r\n   * @params req, res\r\n   * @desc RegisterUser creates and save a new user record into users collection\r\n   * @return 200 status code if and only if a new user is created and saved to the users collection\r\n   */\r\n  RegisterUser(req, res) {\r\n    // Search users collection by email\r\n    User.findOne({ email: req.body.email }).then(user => {\r\n      // Check if a user already exist with the email in the users collection\r\n      if (user) {\r\n        // if true then\r\n        // return 400 status code and display 'Email already exist' to the user\r\n        return res.status(400).json({ email: 'Email already exist' });\r\n      } else {\r\n        // Otherwise\r\n        // Get avatar from gravatar\r\n        const avatar = gravatar.url(req.body.email, {\r\n          s: '200', // Size\r\n          r: 'pg', // Rating\r\n          d: 'mm' // Default\r\n        });\r\n\r\n        // Create a new user\r\n        const newUser = new User({\r\n          name: req.body.name,\r\n          email: req.body.email,\r\n          avatar,\r\n          password: encrypt(req.body.password)\r\n        });\r\n\r\n        // Hash password with bcrypt\r\n        // const bcrypt = bcryptjs;\r\n        // bcrypt.genSalt(10, (err, salt) => {\r\n        //   bcrypt.hash(newUser.password, salt, (err, hash) => {\r\n        //     newUser.password = hash;\r\n\r\n        //     // Save user\r\n        //     newUser\r\n        //       .save()\r\n        //       .then(user => res.status(200).json(user))\r\n        //       .catch(err => console.log(err));\r\n        //   });\r\n        // });\r\n\r\n        // Save User\r\n        newUser\r\n          .save()\r\n          .then(user => {\r\n            res.status(200).json(user);\r\n          })\r\n          .catch(err => console.log(err));\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default UsersController;\r\n"],"file":"UsersController.js"}