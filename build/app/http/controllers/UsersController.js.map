{"version":3,"sources":["../../../../src/app/http/controllers/UsersController.js"],"names":["UsersController","req","res","User","findOne","email","body","then","user","status","json","error","avatar","gravatar","url","s","r","d","newUser","name","password","bcrypt","genSalt","err","salt","hash","save","message","compare","isMatch","payload","id","jwt","sign","keys","secret","expiresIn","token","success"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable no-return-assign */\r\nimport gravatar from 'gravatar';\r\nimport bcrypt from 'bcryptjs';\r\nimport User from '../../../database/models/User';\r\nimport jwt from 'jsonwebtoken';\r\nimport keys from '../../../config/keys'\r\n\r\nclass UsersController {\r\n  /**\r\n   * @params  req, res\r\n   * @desc    RegisterUser creates and save a new user record into users collection\r\n   * @return  200 status code if and only if a new user is created and saved to the users collection\r\n   */\r\n  RegisterUser(req, res) {\r\n    // Search users collection by email\r\n    User.findOne({\r\n      email: req.body.email\r\n    }).then(user => {\r\n      // Check if a user already exist with the email in the users collection\r\n      if (user) {\r\n        // if true then\r\n        // return 400 status code and display 'Email already exist' to the user\r\n        return res.status(400).json({\r\n          error: 'Email already exist'\r\n        });\r\n      } else {\r\n        // Otherwise\r\n        // Get avatar from gravatar\r\n        const avatar = gravatar.url(req.body.email, {\r\n          s: '200', // Size\r\n          r: 'pg', // Rating\r\n          d: 'mm' // Default\r\n        });\r\n\r\n        // Create a new user\r\n        const newUser = new User({\r\n          name: req.body.name,\r\n          email: req.body.email,\r\n          avatar,\r\n          password: req.body.password\r\n        });\r\n\r\n        // hash password\r\n        bcrypt.genSalt(10, (err, salt) => {\r\n          bcrypt.hash(newUser.password, salt, (err, hash) => {\r\n            // if (err) throw err;\r\n            newUser.password = hash;\r\n\r\n            // Save user\r\n            newUser.save().then(user => {\r\n              return res\r\n                .status(200)\r\n                .json({ message: 'User created successfully', user });\r\n            });\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @params  req, res\r\n   * @desc    LoginUser: find and check if user record exists in the users collection\r\n   * @return  200 status code if and only if the user's records exists in the users collection\r\n   */\r\n  LoginUser(req, res) {\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n    // Find user by email\r\n    User.findOne({\r\n      email\r\n    }).then(user => {\r\n      if (!user) {\r\n        // if user's does not exists then\r\n        // return a 404 status code to the user\r\n       return res.status(401).json({\r\n          error: 'User not found'\r\n        });\r\n      }\r\n      bcrypt.compare(password, user.password).then(isMatch => {\r\n        if (isMatch) {\r\n          // if true then create JWT payload and sign token\r\n          const payload = { id: user.id, name: user.name, avatar: user.avatar }; // Create JWT payload\r\n          // Sign the token\r\n          jwt.sign(payload, keys.secret, { expiresIn: 3600 }, (err, token) => {\r\n            return res.status(200).json({\r\n              success: true,\r\n              token: 'Bearer ' + token\r\n            })\r\n          });\r\n        } else {\r\n          // else return 404 password incorrect\r\n          return res.status(401).json({\r\n            error: 'Password incorrect'\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default UsersController;\r\n"],"file":"UsersController.js"}