{"version":3,"sources":["../../../../src/app/http/controllers/UsersController.js"],"names":["UsersController","req","res","User","findOne","email","body","then","user","status","json","avatar","gravatar","url","s","r","d","newUser","name","password","bcrypt","genSalt","err","salt","hash","save","message","error","isMatch","compareSync","toString"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;;;;;;;;;IAEMA,e;;;;;;;;;;AACJ;;;;;iCAKaC,G,EAAKC,G,EAAK;AACrB;AACAC,uBAAKC,OAAL,CAAa;AACXC,QAAAA,KAAK,EAAEJ,GAAG,CAACK,IAAJ,CAASD;AADL,OAAb,EAEGE,IAFH,CAEQ,UAAAC,IAAI,EAAI;AACd;AACA,YAAIA,IAAJ,EAAU;AACR;AACA;AACA,iBAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BL,YAAAA,KAAK,EAAE;AADmB,WAArB,CAAP;AAGD,SAND,MAMO;AACL;AACA;AACA,cAAMM,MAAM,GAAGC,qBAASC,GAAT,CAAaZ,GAAG,CAACK,IAAJ,CAASD,KAAtB,EAA6B;AAC1CS,YAAAA,CAAC,EAAE,KADuC;AAChC;AACVC,YAAAA,CAAC,EAAE,IAFuC;AAEjC;AACTC,YAAAA,CAAC,EAAE,IAHuC,CAGlC;;AAHkC,WAA7B,CAAf,CAHK,CASL;;;AACA,cAAMC,OAAO,GAAG,IAAId,gBAAJ,CAAS;AACvBe,YAAAA,IAAI,EAAEjB,GAAG,CAACK,IAAJ,CAASY,IADQ;AAEvBb,YAAAA,KAAK,EAAEJ,GAAG,CAACK,IAAJ,CAASD,KAFO;AAGvBM,YAAAA,MAAM,EAANA,MAHuB;AAIvBQ,YAAAA,QAAQ,EAAElB,GAAG,CAACK,IAAJ,CAASa;AAJI,WAAT,CAAhB,CAVK,CAiBD;;AACAC,+BAAOC,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChCH,iCAAOI,IAAP,CAAYP,OAAO,CAACE,QAApB,EAA8BI,IAA9B,EAAoC,UAACD,GAAD,EAAME,IAAN,EAAe;AACjD;AACAP,cAAAA,OAAO,CAACE,QAAR,GAAmBK,IAAnB,CAFiD,CAIjD;;AACAP,cAAAA,OAAO,CAACQ,IAAR,GAAelB,IAAf,CAAoB,UAAAC,IAAI,EAAI;AAC1B,uBAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEgB,kBAAAA,OAAO,EAAE;AAAX,iBAArB,CAAP;AACD,eAFD;AAGD,aARD;AASD,WAVD;AAWL;AACF,OAxCD;AAyCD;AAED;;;;;;;;8BAKUzB,G,EAAKC,G,EAAK;AAClB,UAAMG,KAAK,GAAGJ,GAAG,CAACK,IAAJ,CAASD,KAAvB;AACA,UAAMc,QAAQ,GAAGlB,GAAG,CAACK,IAAJ,CAASa,QAA1B,CAFkB,CAGlB;;AACAhB,uBAAKC,OAAL,CAAa;AACXC,QAAAA,KAAK,EAALA;AADW,OAAb,EAEGE,IAFH,CAEQ,UAAAC,IAAI,EAAI;AACd,YAAI,CAACA,IAAL,EAAW;AACT;AACA;AACCN,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBiB,YAAAA,KAAK,EAAE;AADa,WAArB;AAGF;;AACD,YAAMC,OAAO,GAAGR,qBAAOS,WAAP,CAAmBV,QAAQ,CAACW,QAAT,EAAnB,EAAwCtB,IAAI,CAACW,QAA7C,CAAhB;;AACA,YAAIS,OAAJ,EAAa;AACX;AACA;AACC1B,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBgB,YAAAA,OAAO,EAAE;AADW,WAArB;AAGF,SAND,MAMO;AACL;AACA,iBAAOxB,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BiB,YAAAA,KAAK,EAAE;AADmB,WAArB,CAAP;AAGD;AACF,OAvBD;AAwBD;;;;;;eAGY3B,e","sourcesContent":["/* eslint-disable no-shadow */\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable no-return-assign */\r\nimport gravatar from 'gravatar';\r\nimport bcrypt from 'bcryptjs';\r\nimport User from '../../../database/models/User';\r\n\r\nclass UsersController {\r\n  /**\r\n   * @params  req, res\r\n   * @desc    RegisterUser creates and save a new user record into users collection\r\n   * @return 200 status code if and only if a new user is created and saved to the users collection\r\n   */\r\n  RegisterUser(req, res) {\r\n    // Search users collection by email\r\n    User.findOne({\r\n      email: req.body.email\r\n    }).then(user => {\r\n      // Check if a user already exist with the email in the users collection\r\n      if (user) {\r\n        // if true then\r\n        // return 400 status code and display 'Email already exist' to the user\r\n        return res.status(400).json({\r\n          email: 'Email already exist'\r\n        });\r\n      } else {\r\n        // Otherwise\r\n        // Get avatar from gravatar\r\n        const avatar = gravatar.url(req.body.email, {\r\n          s: '200', // Size\r\n          r: 'pg', // Rating\r\n          d: 'mm' // Default\r\n        });\r\n\r\n        // Create a new user\r\n        const newUser = new User({\r\n          name: req.body.name,\r\n          email: req.body.email,\r\n          avatar,\r\n          password: req.body.password\r\n        });\r\n\r\n            // hash password\r\n            bcrypt.genSalt(10, (err, salt) => {\r\n              bcrypt.hash(newUser.password, salt, (err, hash) => {\r\n                // if (err) throw err;\r\n                newUser.password = hash;\r\n\r\n                // Save user\r\n                newUser.save().then(user => {\r\n                  return res.status(200).json({ message: 'User created successfully'});\r\n                })\r\n              });\r\n            });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @params  req, res\r\n   * @desc    LoginUser: find and check if user record exists in the users collection\r\n   * @return 200 status code if and only if the user's records exists in the users collection\r\n   */\r\n  LoginUser(req, res) {\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n    // Find user by email\r\n    User.findOne({\r\n      email\r\n    }).then(user => {\r\n      if (!user) {\r\n        // if user's does not exists then\r\n        // return a 404 status code to the user\r\n         res.status(401).json({\r\n          error: 'User not found'\r\n        });\r\n      }\r\n      const isMatch = bcrypt.compareSync(password.toString(), user.password);\r\n      if (isMatch) {\r\n        // if true then\r\n        // return 200 status code\r\n         res.status(200).json({\r\n          message: 'Success'\r\n        });\r\n      } else {\r\n        // else return 404 password incorrect\r\n        return res.status(401).json({\r\n          error: 'Password Incorrect'\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default UsersController;\r\n"],"file":"UsersController.js"}