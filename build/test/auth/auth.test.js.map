{"version":3,"sources":["../../../src/test/auth/auth.test.js"],"names":["describe","beforeEach","done","User","deleteMany","err","user","name","email","password","it","app","post","send","set","expect","end","res","body","to","have","property","deep","be","an","afterEach","mongoose","disconnect"],"mappings":";;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAPA;AASAA,QAAQ,CAAC,gCAAD,EAAmC,YAAM;AAC/CC,EAAAA,UAAU,CAAC,UAAAC,IAAI,EAAI;AACjB;AACAC,qBAAKC,UAAL,CAAgB,EAAhB,EAAoB,UAAAC,GAAG,EAAI;AACzBH,MAAAA,IAAI;AACL,KAFD;AAGD,GALS,CAAV,CAD+C,CAOjD;;AACE,MAAII,IAAI,GAAG;AACTC,IAAAA,IAAI,EAAE,MADG;AAETC,IAAAA,KAAK,EAAE,eAFE;AAGTC,IAAAA,QAAQ,EAAE;AAHD,GAAX;AAKAC,EAAAA,EAAE,CAAC,oCAAD,EAAuC,UAAAR,IAAI,EAAI;AAC/C,+BAAQS,kBAAR,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQP,IAFR,EAGGQ,GAHH,CAGO,QAHP,EAGiB,kBAHjB,EAIGC,MAJH,CAIU,cAJV,EAI0B,MAJ1B,EAKGA,MALH,CAKU,GALV,EAMGC,GANH,CAMO,UAACX,GAAD,EAAMY,GAAN,EAAc;AACjB,wBAAOA,GAAG,CAACC,IAAX,EAAiBC,EAAjB,CAAoBC,IAApB,CAAyBC,QAAzB,CAAkC,SAAlC;AACA,wBAAOJ,GAAG,CAACC,IAAX,EAAiBC,EAAjB,CAAoBC,IAApB,CAAyBE,IAAzB,CAA8BD,QAA9B,CACE,SADF,EAEE,2BAFF;AAIAnB,MAAAA,IAAI;AACL,KAbH;AAeD,GAhBC,CAAF;AAkBAQ,EAAAA,EAAE,CAAC,uDAAD,EAA0D,UAAAR,IAAI,EAAI;AAClE,QAAII,IAAI,GAAG;AACTE,MAAAA,KAAK,EAAE,gBADE;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAX;AAIA,+BAAQE,kBAAR,EACGC,IADH,CACQ,kBADR,EAEGC,IAFH,CAEQP,IAFR,EAGGQ,GAHH,CAGO,QAHP,EAGiB,kBAHjB,EAIGC,MAJH,CAIU,cAJV,EAI0B,MAJ1B,EAKGA,MALH,CAKU,GALV,EAMGC,GANH,CAMO,UAACX,GAAD,EAAMY,GAAN,EAAc;AACjB,wBAAOA,GAAG,CAACC,IAAX,EAAiBC,EAAjB,CAAoBI,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA,wBAAOP,GAAG,CAACC,IAAX,EAAiBC,EAAjB,CAAoBC,IAApB,CAAyBC,QAAzB,CAAkC,OAAlC;AACA,wBAAOJ,GAAG,CAACC,IAAX,EAAiBC,EAAjB,CAAoBC,IAApB,CAAyBE,IAAzB,CAA8BD,QAA9B,CAAuC,OAAvC,EAAgD,gBAAhD;AACAnB,MAAAA,IAAI;AACL,KAXH;AAYD,GAjBC,CAAF;AAmBAuB,EAAAA,SAAS,CAAC,UAASvB,IAAT,EAAe;AACvB,WAAOwB,qBAASC,UAAT,CAAoBzB,IAApB,CAAP;AACD,GAFQ,CAAT;AAGD,CArDO,CAAR","sourcesContent":["/* eslint-disable no-undef */\r\nimport request from 'supertest';\r\nimport mongoose from 'mongoose';\r\nimport faker from 'faker';\r\nimport { expect } from 'chai';\r\nimport app from '../../server';\r\nimport assert from 'assert';\r\nimport User from '../../database/models/User';\r\n\r\ndescribe('[Authentication] /auth Testing', () => {\r\n  beforeEach(done => {\r\n    //Before each test we empty the database\r\n    User.deleteMany({}, err => {\r\n      done();\r\n    });\r\n  });\r\n// const email = faker.internet.email();\r\n  let user = {\r\n    name: 'jane',\r\n    email: 'jane@test.com',\r\n    password: '123456'\r\n  };\r\n  it('should be able to sign up new user', done => {\r\n    request(app)\r\n      .post('/api/auth/register/')\r\n      .send(user)\r\n      .set('Accept', 'application/json')\r\n      .expect('Content-Type', /json/)\r\n      .expect(201)\r\n      .end((err, res) => {\r\n        expect(res.body).to.have.property('message');\r\n        expect(res.body).to.have.deep.property(\r\n          'message',\r\n          'User created successfully'\r\n        );\r\n        done();\r\n      });\r\n\r\n  });\r\n\r\n  it('should not be able to sign in user with invalid email', done => {\r\n    let user = {\r\n      email: 'jane@test.com9',\r\n      password: '123456'\r\n    };\r\n    request(app)\r\n      .post('/api/auth/login/')\r\n      .send(user)\r\n      .set('Accept', 'application/json')\r\n      .expect('Content-Type', /json/)\r\n      .expect(401)\r\n      .end((err, res) => {\r\n        expect(res.body).to.be.an('object');\r\n        expect(res.body).to.have.property('error');\r\n        expect(res.body).to.have.deep.property('error', 'User not found');\r\n        done();\r\n      });\r\n  });\r\n\r\n  afterEach(function(done) {\r\n    return mongoose.disconnect(done);\r\n  });\r\n});\r\n"],"file":"auth.test.js"}