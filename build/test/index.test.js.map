{"version":3,"sources":["../../src/test/index.test.js"],"names":["it","done","new_user","app","post","send","expect","end","err","response","assert","deepEqual","body","name","email","password"],"mappings":";;AACA;;AACA;;AACA;;AAGA;;AACA;;;;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAAC,kDAAD,EAAqD,UAAUC,IAAV,EAAgB;AACrE;AACA,MAAMC,QAAQ,GAAG;AACf,YAAQ,MADO;AAEf,aAAS,eAFM;AAGf,gBAAY;AAHG,GAAjB;AAKA,6BAAQC,kBAAR,EACGC,IADH,CACQ,gBADR,EAEGC,IAFH,CAEQH,QAFR,EAGGI,MAHH,CAGU,GAHV,EAIGC,GAJH,CAIO,UAAUC,GAAV,EAAeC,QAAf,EAAyB;AAC5BC,uBAAOC,SAAP,CAAiBF,QAAQ,CAACG,IAAT,CAAcV,QAA/B,EAAyC;AACvCW,MAAAA,IAAI,EAAE,MADiC;AAEvCC,MAAAA,KAAK,EAAE,eAFgC;AAGvCC,MAAAA,QAAQ,EAAE;AAH6B,KAAzC;;AAKAd,IAAAA,IAAI;AACL,GAXH;AAYD,CAnBC,CAAF","sourcesContent":["/* eslint-disable no-undef */\r\nimport request from 'supertest';\r\nimport faker from 'faker';\r\nimport {\r\n  expect\r\n} from 'chai';\r\nimport app from '../server';\r\nimport assert from 'assert';\r\n\r\n// describe('User registration', () => {\r\n//   it('should be able to sign up a new user', done => {\r\n//     request(app)\r\n//       .post('/auth/register')\r\n//       .send({\r\n//         // mock valid user input\r\n//         name: 'jane',\r\n//         email: 'jane@test.com',\r\n//         password: '123456'\r\n//       })\r\n//       .set('Accept', 'application/json')\r\n//       .expect('Content-Type', /json/)\r\n//       .expect(201)\r\n//       .expect(res.body).to.be.an('object')\r\n//       .end((err, response) => {\r\n//         assert.deepEqual(response.body, {\r\n//           name: 'Alex',\r\n//           city: 'London',\r\n//           age: 25\r\n//         });\r\n//         done();\r\n//       });\r\n//   });\r\n// });\r\n\r\n// it('should not be able to sign in if email is incorrect', done => {\r\n//   request(app)\r\n//     .post('/auth/login')\r\n//     .send({\r\n//       email: 'jane@test.com2',\r\n//       password: 'Pass123!'\r\n//     })\r\n//     .set('Accept', 'application/json')\r\n//     .expect('Content-Type', /json/)\r\n//     .expect(401)\r\n//     .end((err, res) => {\r\n//       expect(res.body.message).to.be.equal('User not found');\r\n//       done();\r\n//     });\r\n// });\r\n\r\n// describe('User registration', () => {\r\n//   it('should not be able to sign in if email is incorrect', () => {\r\n//     return request(app)\r\n//       .post('/auth/register')\r\n//       .send({\r\n//         // mock valid user input\r\n//         name: 'jane',\r\n//         email: 'jane@test.com',\r\n//         password: '123456'\r\n//       })\r\n//       .set('Accept', 'application/json')\r\n//       .expect('Content-Type', /html/)\r\n//       .expect(res => {\r\n//         assert.equal(res.body, 'registration was successful!');\r\n//       });\r\n//   });\r\n// });\r\nit('should respond with JSON data when API is called', function (done) {\r\n  //mock valid user input\r\n  const new_user = {\r\n    \"name\": \"jane\",\r\n    \"email\": \"jane@test.com\",\r\n    \"password\": \"secret\"\r\n  }\r\n  request(app)\r\n    .post('/auth/register')\r\n    .send(new_user)\r\n    .expect(200)\r\n    .end(function (err, response) {\r\n      assert.deepEqual(response.body.new_user, {\r\n        name: \"jane\",\r\n        email: \"jane@test.com\",\r\n        password: \"123456\"\r\n      });\r\n      done();\r\n    });\r\n});"],"file":"index.test.js"}